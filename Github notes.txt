Getting a new computer:

Put the repo directories wherever you want them. 
go into dir and:
git init
git pull (followed by url from github repo!)
git status
if files to add:
git add -A
if that fails:
git push:
if that fails:
git push --set-upstream <url>
should be good to go


Normal update protocol:
Command line from repo dir:
git add .
git commit -m "notes"
git push



Github:
Locally: username is paul wolf
email is paul.wolf@usu.edu
Account Wolflab
email is paul.wolf@usu.edu
spunspun11

bitbucket account name: paulwolf

Building a repo
To create link:  First login into Github and create a repository. Include a README file (so you hve something to work with). Name it and make it public.
click on the repo and look at the url bottom right. copy it.
Now go to terminal on your laptop GO TO THE DIRECTORY ABOVE (YES ABOVE) the level where you want to create a new repo.
type: git clone <url from above>
repo should appear now. You can now edit files. Then add them (to stage) then commit, check status, pull and push.

files to ignore:    .gitignore
create .gitignore (or copy - see below)
each line with the file name rules  e.g.,
*.DS_Store*
Might need to follow last line with line break
Then need to add and commit:
$ git add .gitignore
$ git commit -m "Add the ignore file"
But now you need to go in an delete the files:
git rm .DS_Store
git add .DS_Store
and finally  ls -a to check
Then (of course) git push
to do this in new clone you can copy .gitignore over like this:
$ cp /Users/paulwolf/Documents/Python_files/Github/Ethans_course2/.gitignore .

 Here is some history. I edited the README file:

  494  nano README.md 
  495  git add README.md 
  497  git commit -m "made silly changes to README file"
  498  git status
  499  git pull
  500  git push

Undo edits. Just edited file and saved (but did not add or commit!)
type git checkout HEAD <filename>
cat <filename>
Now it goes beck in time to last edit

if you added and commited then:
git revert <commit number which you can get from git log>  will get you back to any previous commit and recommit to that level

git revert -h gives you all the commands

git log --oneline gives nice output!

error:
Pauls-MacBook-Air-2:hw1 paulwolf$ git revert 05f0c1e
error: could not revert 05f0c1e... seeing if I can revert damage done bby said moron
hint: after resolving the conflicts, mark the corrected paths
hint: with 'git add <paths>' or 'git rm <paths>'
hint: and commit the result with 'git commit'
Pauls-MacBook-Air-2:hw1 paulwolf$ 

All I want is to revert back to 05f0c1e for file 1.fd
Carol's solution:

  510  git checkout 05f0c -- 1.fd    [pulling up just THIS file from that commit ID]
  511  cat 1.fd
  512  git status
  513  git add .   [now adding]
  514  git status
  515  git commit -m 'Paul, is this what you want?'  [now commiting]
  516  git status
  517  cat 1.fd
  518  git push
  519  git pull

Remving a file!

git rm <filename>
